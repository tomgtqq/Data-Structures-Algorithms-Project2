Analyze:
I need to calculate the frequency of each character in the string, so I used Counter . and then I need a sorted list for Huffman coding. and I chose the latest frequency tow item from the list. I need to create a Huffman tree to encoding my data. so I create a Node class and Tree class. I made each unique character as a leaf node.

For the time complexity. It's O(NlogN). because the sorting taking O(NlogN), the recursion method taking O(n/2)+1, the for loop taking O(n). so how long the code run depending on the sroting. the time complexity is O(NlogN).

pro_data = sorted(Counter(data).most_common(), key=lambda x: x[1])  --> O(NlogN)
    
"huffman_encoding_recursion" --> O(n/2)+1

"huffman_decoding"  ---> O(n)

For the space complexity,I'm saving all the elements in a tree. so as the number of elements grows the space occupied or needed to store these elements increases as well proportionally to the number of added elements. so the space complexity is O(N)