Analyze:

Problem 1: LRU Cache

Analyze:
I need to design the stored elements in some sort of structure because I need to find the least recently used entry. The LinkedList has an order data structure. I need to keep track of what's the next item. so I need to move the used node to the list head. and I'd better used a double linked list to easily move the node. All operations must take O(1) time, So I can't use a while loop to find the node. where the inefficiency is, how can I do something to address that inefficiency and make it more efficient. so I need a cache map to get data immediately.

Subtask:
1. DLinkedList to track the order
2. Cache map to get the data immediately

For time complexity depending set() and get() method, I'm using  "self.cache = {}" to cache the node. so I could get a node from the cache for operation. The "get()" method takes O(1) time complexity.

   def get(self, key):

        node = self.cache.get(key)   --> O(1)
        if not node:
            return -1

I'm adding new node in the head of linkedlist, so the "set()" method takes O(1).

    def _add_node(self, node):
        # add new node into DLinkedNode
        node.next = self.head.next
        self.head.next.previous = node     --> O(1)

        node.previous = self.head
        self.head.next = node


I'm saving all the elements in a linked list. so as the number of elements grows the space occupied or needed to store these elements increases as well proportionally to the number of added elements. so the space complexity is O(N)
